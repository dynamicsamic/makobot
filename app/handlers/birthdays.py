import logging
from logging.config import fileConfig

import yadisk_async
from aiogram import types
from aiogram.dispatcher import FSMContext

from app import settings
from app.db.models import Birthday
from app.db.shared import get_session
from app.scheduler import Scheduler
from app.states import AddBirthday
from app.toolbox.birthdays import (
    Messages,
    add_birthday,
    dispatch_birthday_messages_to_chat,
)
from app.toolbox.birthdays.messageformat import decline_month
from app.utils import (
    days_grid_reply_kb,
    days_in_month,
    months_grid_reply_kb,
    set_inline_button,
    update_envar,
)

from .common import cmd_cancel

fileConfig(fname="log_config.conf", disable_existing_loggers=False)
logger = logging.getLogger(__name__)


async def cmd_send_birthday_messages(message: types.Message):
    """Command for requesting birthday info."""
    if not Messages.is_fresh(minutes=30):
        await Messages.load()
        logger.info("load birthday messages via request from user")
    await dispatch_birthday_messages_to_chat(message.chat.id)


async def cmd_add_chat_to_birthday_mailing(message: types.Message):
    """Command for adding chat-requester to birthday maling.
    Currently days and time are unavailable to choose.
    Need to implement tihs later.
    """
    chat_id = message.chat.id
    try:
        Scheduler.add_chat_to_birthday_mailing(chat_id)
    except Exception as e:
        logger.error(f"Scheduler <add_chat_to_mailing> error: {e}")
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.",
            disable_notification=True,
        )
    else:
        logger.info(f"Chat[{chat_id}] added to mailing list")
        await message.answer(
            "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ "
            "–¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.\n"
            "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –ú–°–ö.",
            disable_notification=True,
        )


async def cmd_remove_chat_from_birthday_mailing(message: types.Message):
    "Command for removing chat-requester from birthday mailing list."
    chat_id = message.chat.id
    try:
        Scheduler.remove_job(str(chat_id))
    except Exception as e:
        logger.error(f"Scheduler <remove_chat_from_mailing> error: {e}")
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.",
            disable_notification=True,
        )
    else:
        logger.info(f"Chat[{chat_id}] removed from mailing list")
        await message.answer(
            "–ß–∞—Ç –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤. "
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å–ª—ã–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addchat.",
            disable_notification=True,
        )


async def cmd_verify_confirm_code(message: types.Message):
    """Command for Yandex.Disk confirmation code verification.
    If code valid, sets new token to yadisk_async.YaDisk instance.
    If code is invalid sends a callback message with button
    for generating new code.
    """
    confrm_code = message.get_args()
    if not confrm_code:
        await message.reply(
            "–í—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /code, –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–±–µ–ª –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥.",
            disable_notification=True,
        )
    else:
        disk = yadisk_async.YaDisk(
            id=settings.YANDEX_APP_ID, secret=settings.YANDEX_SECRET_CLIENT
        )
        try:
            resp = await disk.get_token(confrm_code)
        except yadisk_async.exceptions.BadRequestError:
            kbd = set_inline_button(
                text="–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤—ã–π –∫–æ–¥",
                callback_data="confirm_code",
            )
            await message.answer(
                "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥.",
                reply_markup=kbd,
                disable_notification=True,
            )
        else:
            new_token = resp.access_token
            disk.token = new_token
            if await disk.check_token():
                # update YADISK_TOKEN env var
                update_envar(
                    settings.BASE_DIR / ".env", "YADISK_TOKEN", new_token
                )
                await message.answer(
                    "–ö–æ–¥ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è—Ö "
                    "–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /sendbdays.",
                    disable_notification=True,
                )
            else:
                await message.answer(
                    "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                    disable_notification=True,
                )


async def get_confirm_code(call: types.CallbackQuery):
    """Callback for sending 'obtain Yandex.Disk code' url to user."""
    disk = yadisk_async.YaDisk(
        id=settings.YANDEX_APP_ID, secret=settings.YANDEX_SECRET_CLIENT
    )
    await call.message.answer(disk.get_code_url(), disable_notification=True)
    await call.answer()


async def cmd_new_birthday(message: types.Message, state: FSMContext):
    await message.answer(
        "1/3 ‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü üìÖ, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π",
        reply_markup=months_grid_reply_kb(),
        disable_notification=True,
    )
    await state.set_state(AddBirthday.month.state)


async def new_birthday_month(message: types.Message, state: FSMContext):
    month = message.text.lower()
    if month == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await cmd_cancel(message, state)
        return
    elif month not in settings.MONTHS:
        await message.answer(
            "‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü, "
            "–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.",
            disable_notification=True,
        )
        return
    await state.update_data(month=month)

    await state.set_state(AddBirthday.day.state)
    await message.answer(
        "2/3 ‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å üî¢, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.",
        reply_markup=days_grid_reply_kb(month),
        disable_notification=True,
    )


async def new_birthday_day(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    max_days = days_in_month(user_data.get("month"))
    day = message.text
    if day == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await cmd_cancel(message, state)
        return
    elif day == "üîÑ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        await state.reset_state()
        await cmd_new_birthday(message, state)
        return
    elif not day.isnumeric() or int(day) < 1 or int(day) > max_days:
        await message.answer(
            "‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, "
            "–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.",
            disable_notification=True,
        )
        return
    await state.update_data(day=day)

    await state.set_state(AddBirthday.name.state)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
    kb.row("‚ùå –æ—Ç–º–µ–Ω–∞", "üîÑ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
    await message.answer(
        "3/3 ‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è –≤ —Ç–æ–º —á–∏—Å–ª–µ "
        "–∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã\n."
        "–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏ 1-–≥–æ –ø—Ä–æ–±–µ–ª–∞.",
        reply_markup=kb,
        disable_notification=True,
    )


async def new_birthday_name(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    name = message.text.strip()
    if name == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await cmd_cancel(message, state)
        return
    elif name == "üîÑ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        await state.reset_state()
        await cmd_new_birthday(message, state)
        return
    elif len(name) < 5 and " " not in name:
        await message.answer(
            "‚ùó–§–ò–û –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–ª–∏–Ω—É "
            "–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª.",
            disable_notification=True,
        )
        return

    # Check if partner already exists.
    with get_session() as session:
        if Birthday.queries.get(session, name=name):
            await message.answer(
                f"‚ùó–ü–∞—Ä—Ç–Ω–µ—Ä —Å –§–ò–û `{name}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                "\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–æ–±–≤–ª—è–µ—Ç–µ –§–ò–û –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.\n"
                "–ü—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –§–ò–û, –¥–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∞—Ç—Ä–∏–±—É—Ç –æ—Ç–ª–∏—á–∏—è.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ú–∏–Ω–æ–±—Ä–Ω–∞—É–∫–∏.",
                disable_notification=True,
            )
            return

    await state.update_data(name=name)
    await state.set_state(AddBirthday.complete.state)

    month = user_data.get("month")
    day = user_data.get("day")

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("‚ùå –æ—Ç–º–µ–Ω–∞", "üîÑ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "üíæ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")

    await message.answer(
        "–í—ã –≤–≤–µ–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞:\n"
        f"üíé {day} {decline_month(month)}, {name}."
        "\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ, –æ—Ç–º–µ–Ω–∏—Ç—å ‚ùå –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ "
        "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ üîÑ, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å "
        "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
        reply_markup=kb,
        disable_notification=True,
    )


async def new_birthday_complete(message: types.Message, state: FSMContext):
    command = message.text
    if command == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await cmd_cancel(message, state)
        return
    elif command == "üîÑ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        await state.reset_state()
        await cmd_new_birthday(message, state)
        return
    elif command == "üíæ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å":
        user_data = await state.get_data()
        month, day, name = user_data.values()

        # This depends heavily on the structure of your excel file.
        # In our case we only add data to the first 4 columns,
        # where 3-rd column is not currently in use, that's why it's empty str.
        # The order of values in birtday_data list is CRUCIAL!
        birthday_data = [int(day), month, "", name]

        await message.answer(
            "‚è≥–û–±–Ω–æ–≤–ª—è—é —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–µ...",
            disable_notification=True,
            reply_markup=types.ReplyKeyboardRemove(),
        )
        if await add_birthday(message, birthday_data):
            await message.answer(
                "üëç–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:\n"
                f"{day} {decline_month(month)}, {name}",
                disable_notification=True,
            )

            # Refresh messages in database.
            await Messages.load()
            logger.info(
                "load birthday messages after remote file update by user"
            )
        else:
            await message.answer(
                "üîå–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–µ.\n"
                "–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ —É–∂–µ –≤ –∫—É—Ä—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ.",
                disable_notification=True,
            )
        await state.finish()
    else:
        await message.answer(
            "‚ùó–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, "
            "–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.",
            disable_notification=True,
        )
        return
